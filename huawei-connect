#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import unicode_literals
import sys
import atexit
import os
import time
import logging
import subprocess
import tempfile
import re
import pexpect
import argparse
import textwrap
from string import maketrans


def to_unicode(obj):
    if isinstance(obj, unicode):
        return obj

    return str(obj).decode("utf-8")


class ModemException(Exception):
    pass


class CommunitationError(ModemException):
    pass


class StateBase(object):

    _name = None

    def __init__(self, context):
        super(StateBase, self).__init__()

        self._context = context
        self._logger = logging.getLogger("modem:{}".format(self._name))

    def find(self):
        raise NotImplementedError()

    def reset(self):
        raise NotImplementedError()

    def open(self):
        raise NotImplementedError()

    def close(self):
        raise NotImplementedError()

    def start(self):
        raise NotImplementedError()

    def signal_strength(self):
        raise NotImplementedError()

    def network_info(self):
        raise NotImplementedError()

    def _execute(self, *args):
        exe = args[0]
        proc = subprocess.Popen(
            args=args,
            stdin=None,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT
        )
        pid = proc.pid
        self._logger.debug("execute {} ({}): {}".format(exe, pid, " ".join(args)))
        stdout, _ = proc.communicate()
        retcode = proc.returncode

        self._logger.debug("{} ({}): return code {}".format(exe, pid, retcode))

        if stdout:
            self._logger.debug("{} ({}):\n{}".format(exe, pid, stdout))

        if retcode != 0:
            raise self._error("{} died with code {}".format(exe, retcode))

    def _error(self, message):
        self._logger.error(message)
        return ModemException(message)


class StateNotFound(StateBase):

    _name = "not_found"

    def __init__(self, context):
        super(StateNotFound, self).__init__(context)

        self._context.tty = None
        self._context.iface = None

    def find(self):
        storage_path = self._find_usb_device_path(
            self._context.storage_vendor_id,
            self._context.storage_product_id,
        )

        if storage_path is not None:
            self._logger.debug("switch mode")
            self._switch_mode()

        modem_path = self._find_usb_device_path(
            self._context.modem_vendor_id,
            self._context.modem_product_id,
        )

        if modem_path is None:
            self._logger.debug("modem usb path not found")
            return False

        self._logger.debug("modem usb path: {}".format(modem_path))

        tty = self._find_tty(modem_path)

        if tty is None:
            raise self._error("tty path not found")

        self._context.tty = tty
        self._logger.debug("tty path: {}".format(tty))

        iface = self._find_iface(modem_path)

        if iface is None:
            raise self._error("network interface not found")

        self._context.iface = iface
        self._logger.debug("network interface: {}".format(iface))

        self._context.state = "closed"
        return True

    def _switch_mode(self):
        self._execute(
            "usb_modeswitch", "-W", "-I", "-s", "20",
            "-v", self._context.storage_vendor_id,
            "-p", self._context.storage_product_id,
            "-V", self._context.modem_vendor_id,
            "-P", self._context.modem_product_id,
            "-u", "-1",
            "-M", "55534243123456780000000000000011062000000100000000000000000000",
        )

    @classmethod
    def _find_usb_device_path(cls, vendor_id, product_id):
        usb_devices_path = "/sys/bus/usb/devices"
        usb_devices_list = os.listdir(usb_devices_path)

        for device in usb_devices_list:
            device_path = os.path.join(usb_devices_path, device)
            idVendor_path = os.path.join(device_path, "idVendor")
            idProduct_path = os.path.join(device_path, "idProduct")

            if not os.path.exists(idVendor_path) \
                    or not os.path.exists(idProduct_path):
                continue

            idVendor = open(idVendor_path).read().strip()

            if idVendor != vendor_id:
                continue

            idProduct = open(idProduct_path).read().strip()

            if idProduct != product_id:
                continue

            return cls._get_symlink_target(device_path)

        return None

    @staticmethod
    def _get_symlink_target(symlink):
        return os.path.normpath(
            os.path.join(
                os.path.dirname(symlink),
                os.readlink(symlink),
            )
        )

    @classmethod
    def _find_tty(cls, device_path):
        usb_serial_path = "/sys/bus/usb-serial/devices"

        for tty in os.listdir(usb_serial_path):
            tty_symlink = os.path.join(usb_serial_path, tty)
            abs_tty_path = cls._get_symlink_target(tty_symlink)

            if abs_tty_path.startswith(device_path):
                tty_dev_path = os.path.join("/dev", tty)

                if os.path.exists(tty_dev_path):
                    return tty_dev_path

        return None

    @classmethod
    def _find_iface(cls, device_path):
        net_path = "/sys/class/net"

        for iface in os.listdir(net_path):
            iface_symlink = os.path.join(net_path, iface)
            abs_iface_path = cls._get_symlink_target(iface_symlink)

            if abs_iface_path.startswith(device_path):
                return iface

        return None

    def reset(self):
        self._execute(
            "usb_modeswitch",
            "-v", self._context.modem_vendor_id,
            "-p", self._context.modem_product_id,
            "-R",
        )

    _not_found_err_msg = "modem not found"

    def open(self):
        raise ModemException(self._not_found_err_msg)

    def close(self):
        raise ModemException(self._not_found_err_msg)

    def start(self):
        raise ModemException(self._not_found_err_msg)

    def signal_strength(self):
        raise ModemException(self._not_found_err_msg)

    def network_info(self):
        raise ModemException(self._not_found_err_msg)


class StateClosed(StateBase):

    _name = "closed"
    _reset_timeout = 10

    def __init__(self, context):
        super(StateClosed, self).__init__(context)

    def find(self):
        self._context.state = "not_found"
        return self._context.find()

    def reset(self):
        self._context.state = "not_found"
        self._context.reset()

        die_time = time.time() + self._reset_timeout

        while die_time > time.time():
            if self._context.find():
                break

            time.sleep(0.5)

        else:
            raise self._error("cannot find modem after reset")

    def open(self):
        self._context.state = "opened"

    def close(self):
        pass

    _not_opened_msg = "modem not opened"

    def start(self):
        raise ModemException(self._not_opened_msg)

    def signal_strength(self):
        raise ModemException(self._not_opened_msg)

    def network_info(self):
        raise ModemException(self._not_opened_msg)


class pexpect_logger(object):

    def __init__(self, logger, action):
        super(pexpect_logger, self).__init__()

        self._logger = logger
        self._action = action

    def write(self, msg):
        for line in to_unicode(msg).split("\n"):
            line = "".join(c for c in line if c >= " ").strip()

            if line:
                self._logger.debug("{}:{}".format(self._action, line))

    def flush(self):
        pass


class Connection(object):

    _screen_init_time = 2

    def __init__(self, tty):
        super(Connection, self).__init__()

        self._logger = logging.getLogger("modem:tty")

        fd, self._screen_cfg_path = tempfile.mkstemp(prefix="screen_", suffix=".cfg")
        atexit.register(self._remove_screen_cfg)
        fp = os.fdopen(fd, "w")
        fp.write("startup_message off\n")
        fp.write("hardstatus off\n")
        fp.close()

        exe = "screen"
        args = ["-c", self._screen_cfg_path, tty, "9600"]
        self._tty = pexpect.spawn(exe, args=args)
        self._tty.setecho(False)
        self._logger.debug("spawn {}: {}".format(exe, " ".join(args)))
        time.sleep(self._screen_init_time)

        try:
            # consume all initial screen output
            self._tty.read_nonblocking(0xFFFF, timeout=0)
        except pexpect.TIMEOUT:
            pass
        except pexpect.EOF:
            raise self._connection_died_error()

        if not self._tty.isalive():
            raise self._connection_died_error()

        self._tty.logfile_read = pexpect_logger(self._logger, "read")
        self._tty.logfile_send = pexpect_logger(self._logger, "send")
        self._logger.debug("connection established")

        self.send("AT", "OK", timeout=10)
        self.send("AT^CURC=0", "OK")
        self._logger.debug("connection ready")

    def __del__(self):
        self._remove_screen_cfg()

    def _remove_screen_cfg(self):
        try:
            os.remove(self._screen_cfg_path)
        except OSError:
            pass

    def send(self, command, patterns=None, timeout=5):
        if not self._tty.isalive():
            raise self._connection_died_error()

        self._tty.send("{}\r\n".format(command))

        if patterns is None:
            return None

        try:
            self._tty.expect_exact(patterns, timeout=timeout)
        except pexpect.TIMEOUT:
            raise self._expect_timeout_error()
        except pexpect.EOF:
            raise self._connection_died_error()

        return self._tty.match

    _re_match_type = re.match(r"", "").__class__

    def expect(self, patterns, timeout=5):
        try:
            self._tty.expect(patterns, timeout=timeout)
        except pexpect.TIMEOUT:
            raise self._expect_timeout_error()
        except pexpect.EOF:
            raise self._connection_died_error()

        match = self._tty.match

        if not isinstance(match, self._re_match_type):
            raise self._expect_timeout_error()

        return match

    def isalive(self):
        return self._tty.isalive()

    def close(self, force=False):
        self._logger.debug("connection closed")
        self._tty.close(force)

    def _connection_died_error(self):
        err_msg = "tty connection died"
        self._logger.error(err_msg)
        return ModemException(err_msg)

    def _expect_timeout_error(self):
        err_msg = "modem didn't send what was expected until timeout"
        self._logger.error(err_msg)
        raise CommunitationError(err_msg)


class StateOpened(StateBase):

    _name = "opened"

    def __init__(self, context):
        super(StateOpened, self).__init__(context)

        self._con = Connection(self._context.tty)

    def find(self):
        self.close()
        return self._context.find()

    def open(self):
        pass

    def close(self):
        if self._con.isalive():
            self._con.close(force=True)
        self._context.state = "closed"

    def start(self):
        self._con.send("ATZ", "OK")
        self._con.send("ATQ0 V1 E1 S0=0", "OK")
        self._con.send(
            'AT^NDISDUP=1,1,"{}"'.format(self._context.apn),
            "^NDISSTAT"
        )
        self._con.send("AT^DHCP?", "^DHCP:")
        self._setup_iface()

    def _setup_iface(self):
        self._execute("dhclient", self._context.iface)

    def reset(self):
        self.close()
        self._context.reset()
        self._context.open()

    _regex_signal_strength = re.compile(r"\+CSQ: (?P<rssi>\d+),(?P<ber>\d+)")

    def signal_strength(self):
        # pylint: disable=E1103
        # Connection.expect always return re.match object

        self._con.send("AT+CSQ")
        match = self._con.expect(self._regex_signal_strength)
        rssi = int(match.group("rssi"))

        return rssi

    _regex_network_info = re.compile(
        r"\+COPS: (?P<mode>[0-4])(?:,(?P<format>[0-2]),(?P<oper>\".*\"),(?P<act>[0-7]))?")

    def network_info(self):
        # pylint: disable=E1103
        # Connection.expect always return re.match object

        self._con.send("AT+COPS?")
        match = self._con.expect(self._regex_network_info)

        oper = match.group("oper")

        if oper:
            oper = oper.strip('"')
        else:
            oper = "unknow"

        # 0 GSM                        = 2G or 2.5G if GPRS
        # 1 GSM Compact                = 2G or 2.5G if GPRS
        # 2 UTRAN                      = 3G
        # 3 GSM with EGPRS             = 2.75G
        # 4 UTRAN with HSDPA           = 3G
        # 5 UTRAN with HSUPA           = 3G
        # 6 UTRAN with HSDPA and HSUPA = 3G
        # 7 E-UTRAN                    = 4G (LTE)
        act = match.group("act")

        if act is None:
            act = "N/A"

        else:
            act = int(act)

            if act <= 1:
                act = "2G"
            elif act == 2:
                act = "3G"
            elif act == 3:
                act = "2G+"
            elif 4 <= act <= 6:
                act = "3G+"
            elif act == 7:
                act = "4G"

        return act, oper


class Modem(object):

    storage_vendor_id = "12d1"
    storage_product_id = "14fe"

    modem_vendor_id = "12d1"
    modem_product_id = "1506"

    _states = {
        "not_found": StateNotFound,
        "closed": StateClosed,
        "opened": StateOpened,
    }

    def __init__(self, apn):
        super(Modem, self).__init__()

        self._logger = logging.getLogger("modem")

        self.apn = apn
        self.tty = None
        self.iface = None

        self._state = StateNotFound(self)
        self._state_str = "not_found"

    @property
    def state(self):
        return self._state_str

    @state.setter
    def state(self, value):
        if value not in self._states:
            raise ValueError("unknow state: {}".format(value))

        self._logger.debug("change state: {} -> {}".format(self._state_str, value))
        self._state = self._states[value](self)
        self._state_str = value
        self._logger.debug("new state: {}".format(value))

    @property
    def states(self):
        return self._states.keys()

    @property
    def found(self):
        return self.state != "not_found"

    @property
    def closed(self):
        return self.state != "opened"

    def find(self):
        self._logger.debug("find()")
        return self._state.find()

    def open(self):
        self._logger.debug("open()")
        self._state.open()

    def close(self):
        self._logger.debug("close()")
        self._state.close()

    def start(self):
        self._logger.debug("start()")
        self._state.start()

    def reset(self):
        self._logger.debug("reset()")
        self._state.reset()

    def signal_strength(self):
        return self._state.signal_strength()

    def network_info(self):
        return self._state.network_info()


def monitor(modem, mask, interval):
    mask = to_unicode(mask)

    special_chars = {"\\0": "\0", "\\a": "\a", "\\b": "\b", "\\t": "\t",
                     "\\n": "\n", "\\v": "\v", "\\f": "\f", "\\r": "\r"}

    for old, new in special_chars.items():
        mask = mask.replace(old, new)

    last_line_len = 0

    while True:
        try:
            ss_vl = modem.signal_strength()
            at, op = modem.network_info()
        except CommunitationError:
            continue

        if ss_vl == 99:
            ss_dB = -113
            ss_bi = 0
            ss_br = " "

        else:
            ss_dB = -113 + ss_vl * 2

            if ss_vl < 2:
                ss_bi = 0
                ss_br = " "
            elif ss_vl < 10:
                ss_bi = 1
                ss_br = "▂"
            elif ss_vl < 15:
                ss_bi = 2
                ss_br = "▄"
            elif ss_vl < 20:
                ss_bi = 3
                ss_br = "▆"
            else:
                ss_bi = 4
                ss_br = "█"

        kwargs = {"ss_vl": ss_vl, "ss_dB": ss_dB, "ss_br": ss_br,
                  "ss_bi": ss_bi, "at": at, "op": op}

        line = mask.format(ld="", **kwargs)
        line_len = len(line)

        if last_line_len > line_len:
            len_diff = last_line_len - line_len
        else:
            len_diff = 0

        last_line_len = line_len

        sys.stdout.write(mask.format(ld=" " * len_diff, **kwargs))
        sys.stdout.flush()
        time.sleep(interval)


def main(argv=sys.argv):
    parser = argparse.ArgumentParser(
        prog=os.path.basename(argv[0]),
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Huawei E3276 connect program",
        epilog=textwrap.dedent(
            """\
            MASK controls output. Interpreted sequences are:
              {ss_vl}   raw value of signal strength: 0..31 or 99
              {ss_dB}   signal strength in dB: -113..-51
              {ss_br}   signal strength bar: " ▂▄▆█"
              {ss_bi}   signal strength bar as number: 0..4
              {at}      access technology: 2G, 2G+, 3G, 3G+, 4G or unknown
              {op}      operator string
              {ld}      differences between length of last two lines in spaces
            """
        ),
    )
    parser.add_argument(
        "-v", "--version",
        action="version",
        version="%(prog)s v1.2.0",
    )
    parser.add_argument(
        "-a", "--apn",
        type=str,
        default="internet",
        help="default apn is \"internet\"",
    )
    parser.add_argument(
        "-m", "--monitor",
        metavar="MASK",
        type=str,
        dest="mask",
        nargs="?",
        const="\r{at} {ss_br} {op}{ld}",
        help=("monitor signal strength if connection is success "
              "(default format is \"\\r{at} {ss_br} {op}{ld}\""),
    )
    parser.add_argument(
        "-i", "--interval",
        metavar="SEC",
        type=int,
        default=5,
        help=("interval in seconds between requests while monitoring "
              "(default interval is 5)"),
    )
    parser.add_argument(
        "-d", "--debug",
        action="store_true",
        help="print debug messages to stderr",
    )
    args = parser.parse_args(argv[1:])

    logging.basicConfig(
        level=logging.DEBUG if args.debug else logging.ERROR,
        stream=sys.stderr,
    )

    modem = Modem(apn=args.apn)

    if not modem.find():
        print >> sys.stderr, "{}: modem not found".format(argv[0])
        return 1

    try:
        modem.reset()
        modem.open()
        modem.start()
    except ModemException:
        print >> sys.stderr, "{}: cannot connect to the Internet".format(argv[0])
        return 1

    if args.mask:
        try:
            monitor(modem, args.mask, args.interval)
        except KeyboardInterrupt:
            pass

    modem.close()

    return 0


if __name__ == "__main__":
    sys.exit(main())
